#-*-coding=utf-8-*-
import numpy as np
import Config as cfg


def distance(A, exclude):
    A_list_dist = []
    A_center_x = A[1][0]
    A_center_y = A[1][1]
    for i in [3, 4, 6, 7]:
        if i in exclude:
            continue
        d_x = A[i][0] - A_center_x
        d_y = A[i][1] - A_center_y
        distance = np.sqrt(d_x * d_x + d_y * d_y)
        A_list_dist.append(distance)
    for i,j in [(2, 4), (5, 7), (4, 8), (7, 11), (4, 9), (7, 12), (3, 6)]:
        d_x = A[i][0] - A[j][0]
        d_y = A[i][1] - A[j][1]
        distance = np.sqrt(d_x * d_x + d_y * d_y)
        A_list_dist.append(distance)
    return A_list_dist

def consine(A, B):
    exludce = []
    for i in range(18):
        if (A[i][0]==A[i][1]==0) or (B[i][0]==B[i][1]==0):
            exludce.append(i)
    try:
        exludce.remove(0)
    except:
        pass
    A = distance(A, exludce)
    B = distance(B, exludce)
    A_norm = np.sqrt(np.sum(np.square(A)))
    B_norm = np.sqrt(np.sum(np.square(B)))
    return np.sum(np.dot(A, B)) / (A_norm*B_norm)

def action(keypoints):
    if len(cfg.ACITON_KEYPOINTS) == 0:
        cfg.ACITON_KEYPOINTS = keypoints
        return
    # print(keypoints[8][1] - keypoints[4][1])
    if (keypoints[8][1] - keypoints[4][1]) >= 20:
        print('右手抬起')
    if (keypoints[11][1] - keypoints[7][1]) >= 20:
        print('左手抬起')

# A = np.array([[6.8730774e+02,1.8141081e+02,1.6789612e-01]
# ,[7.2747620e+02,2.0547687e+02,9.1476631e-01]
# ,[7.5566968e+02,2.0548090e+02,8.8102973e-01]
# ,[7.8381305e+02,2.4546574e+02,5.3101021e-01]
# ,[7.7577600e+02,2.6563080e+02,1.7207849e-01]
# ,[6.9549567e+02,2.0922725e+02,8.9405560e-01]
# ,[6.7927216e+02,2.5352144e+02,7.1713519e-01]
# ,[6.5938855e+02,2.9378210e+02,4.5150813e-01]
# ,[7.5586627e+02,3.0582895e+02,7.9097313e-01]
# ,[7.5569580e+02,3.9418961e+02,9.4394660e-01]
# ,[7.5977832e+02,4.7848352e+02,8.3558750e-01]
# ,[7.2342413e+02,3.0976553e+02,8.6377519e-01]
# ,[7.2341199e+02,3.9422684e+02,9.0756595e-01]
# ,[7.2746271e+02,4.7054227e+02,8.1695557e-01]
# ,[0.0000000e+00,0.0000000e+00,0.0000000e+00]
# ,[6.8742700e+02,1.7737048e+02,1.9786640e-01]
# ,[7.2771948e+02,1.7326137e+02,2.4182495e-01]
# ,[7.0341754e+02,1.7338190e+02,6.6909778e-01]])
# B = np.array([[0.0000000e+00,0.0000000e+00,0.0000000e+00]
# ,[7.2755450e+02,2.0120872e+02,8.5039765e-01]
# ,[7.5965851e+02,2.0119093e+02,8.4279025e-01]
# ,[7.8772742e+02,2.3752930e+02,5.4372299e-01]
# ,[7.8357458e+02,2.6554114e+02,1.2517285e-01]
# ,[6.9549127e+02,2.0138049e+02,8.3763832e-01]
# ,[6.7932275e+02,2.4557141e+02,6.4953554e-01]
# ,[6.5925763e+02,2.8569901e+02,3.0209598e-01]
# ,[7.5578424e+02,3.0188428e+02,7.9042894e-01]
# ,[7.5568219e+02,3.9398682e+02,9.2285138e-01]
# ,[7.5585107e+02,4.7440396e+02,8.4258693e-01]
# ,[7.1958246e+02,3.0580453e+02,8.4787053e-01]
# ,[7.1949841e+02,3.9011450e+02,8.5116374e-01]
# ,[7.2352985e+02,4.6641095e+02,7.7243847e-01]
# ,[0.0000000e+00,0.0000000e+00,0.0000000e+00]
# ,[0.0000000e+00,0.0000000e+00,0.0000000e+00]
# ,[7.3164441e+02,1.5321532e+02,2.4313524e-01]
# ,[7.0343176e+02,1.6524544e+02,4.6383619e-01]])
# print(consine(A, B))
